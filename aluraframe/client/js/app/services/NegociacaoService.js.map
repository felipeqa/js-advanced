{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","resolve","reject","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","getConnectionFactory","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n\n    /*\n        Configurações\n        \n        0: requisão não iniciada\n        1: conexão com o servidor estabelecida\n        2: requisição recebida\n        3: processando requisição\n        4: requisição concluida\n    */\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        // versão sem criar a ppromisse usando apenas o return\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n\n        // VERSÃO ANTIGA\n        // return new Promise((resolve, reject) => {\n        //     let xhr = new XMLHttpRequest();\n        //     xhr.open('GET', 'negociacoes/semana');\n        //     xhr.onreadystatechange = () => {\n\n        //         if (xhr.readyState == 4) {\n\n        //             if (xhr.status == 200) {\n\n        //                 resolve(JSON.parse(xhr.responseText)\n        //                     .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n\n        //             } else {\n        //                 console.log(xhr.responseText);\n        //                 reject('Não foi possível obter negociações da semana');\n        //             }\n        //         }\n\n        //     };\n        //     xhr.send();\n        // });\n    };\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    };\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    };\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    };\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            });\n    };\n\n    lista() {\n        return ConnectionFactory.getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível listar a negociação')\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negocioções apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível importar as negociações')\n            });\n    }\n}"]}