{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","console","log","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","erro","Error","Promise","resolve","reject","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","ConnectionFactory","getConnectionFactory","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    /*\n        Configurações\n        \n        0: requisão não iniciada\n        1: conexão com o servidor estabelecida\n        2: requisição recebida\n        3: processando requisição\n        4: requisição concluida\n    */\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesDaSemana() {\n\n        // versão sem criar a ppromisse usando apenas o return\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                console.log(negociacoes);\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n\n        // VERSÃO ANTIGA\n        // return new Promise((resolve, reject) => {\n        //     let xhr = new XMLHttpRequest();\n        //     xhr.open('GET', 'negociacoes/semana');\n        //     xhr.onreadystatechange = () => {\n\n        //         if (xhr.readyState == 4) {\n\n        //             if (xhr.status == 200) {\n\n        //                 resolve(JSON.parse(xhr.responseText)\n        //                     .map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor)));\n\n        //             } else {\n        //                 console.log(xhr.responseText);\n        //                 reject('Não foi possível obter negociações da semana');\n        //             }\n        //         }\n\n        //     };\n        //     xhr.send();\n        // });\n    };\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    };\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                })\n        });\n    };\n\n    obterNegociacoes() {\n\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    };\n\n    cadastra(negociacao) {\n        return ConnectionFactory.getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            });\n    };\n\n    lista() {\n        return ConnectionFactory.getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch((erro) => {\n                console.log(erro);\n                throw new Error('Não foi possível listar a negociação')\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory\n            .getConnectionFactory()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negocioções apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações');\n            });\n    }\n\n    importa(listaAtual) {\n        return this.obterNegociacoes()\n            .then(negociacoes =>\n                negociacoes.filter(negociacao =>\n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível importar as negociações')\n            });\n    }\n}"]}