{"version":3,"sources":["../../app-es6/services/ConnectionFactoryOld.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEMA,6B,GAAqB,YAAY;;AAEnC,oBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAMC,UAAU,CAAhB;AACA,oBAAMC,SAAS,YAAf;;AAEA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;AACA;AAEI,iDAAc;AAAA;;AACV,8BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,+DAMkC;AAC1B,mCAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,4CAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,sDAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,iCAJD;;AAMAR,4CAAYS,SAAZ,GAAwB,aAAK;;AAEzB,wCAAG,CAACf,UAAJ,EAAgB;AACZA,qDAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,gDAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACA;AACAA,mDAAWC,KAAX,GAAmB,YAAW;AAC1B,kDAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,yCAFD;AAGH;AACDE,4CAAQJ,UAAR;AACH,iCAXD;;AAaAM,4CAAYW,OAAZ,GAAsB,aAAK;AACvBC,4CAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2CAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iCAJD;AAMH,6BA7BM,CAAP;AA8BH;AArCL;AAAA;AAAA,sDAuCyBrB,UAvCzB,EAuCqC;AAC7BH,mCAAOyB,OAAP,CAAe,iBAAS;AACpB,oCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEjDzB,2CAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,6BAJD;AAKH;AA7CL;AAAA;AAAA,0DA+C6B;AACrB3B;AACAD,yCAAa,IAAb;AACH;AAlDL;;AAAA;AAAA;AAqDH,aA7DyB,E","file":"ConnectionFactoryOld.js","sourcesContent":["//MODULE PATTERN => Horrivel isso\n\nconst ConnectionFactory = (function () {\n\n    const stores = ['negociacoes'];\n    const version = 4;\n    const dbName = 'aluraframe'\n\n    let connection = null;\n    let close = null;\n    return class ConnectionFactory {\n\n        constructor() {\n            throw new Error('Não é possível criar instãncias de ConnectionFactory');\n        };\n\n        static getConnectionFactory() {\n            return new Promise((resolve, reject) => {\n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStores(e.target.result);\n\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection) {\n                        connection = e.target.result;\n                        close = connection.close.bind(connection);\n                        //Monkey Patch\n                        connection.close = function() {\n                            throw new Error('Voce não pode fechar a conexão diretamente!');\n                        };\n                    };\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n                    console.log(e.target.error);\n\n                    reject(e.target.error.name);\n                };\n\n            });\n        };\n\n        static _createStores(connection) {\n            stores.forEach(store => {\n                if (connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true });\n            });\n        }\n\n        static closeConnection() {\n            close();\n            connection = null;\n        };\n\n    }\n})();"]}